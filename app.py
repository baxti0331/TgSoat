import logging
import sqlite3
import time
import asyncio
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∞–¥–º–∏–Ω –∞–π–¥–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

try:
    ADMIN_ID = int(os.getenv("ADMIN_ID"))
except (TypeError, ValueError):
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class BroadcastStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_text = State()
    waiting_for_media = State()
    waiting_for_buttons = State()
    waiting_for_confirm = State()

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π ---
def init_db():
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        registered_at INTEGER
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS books (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT UNIQUE,
        file_id TEXT
    )
    """)
    conn.commit()
    conn.close()

def add_user(user_id: int):
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO users (user_id, registered_at) VALUES (?, ?)", (user_id, int(time.time())))
        conn.commit()
    conn.close()

def count_users():
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def count_users_since(seconds_ago: int):
    since_ts = int(time.time()) - seconds_ago
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE registered_at >= ?", (since_ts,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def get_all_user_ids():
    conn = sqlite3.connect("bot_data.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    rows = cursor.fetchall()
    conn.close()
    return [r[0] for r in rows]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def admin_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="send_broadcast")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", callback_data="admin_search")]
    ])
    return kb

def broadcast_type_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="type_text")],
        [InlineKeyboardButton("üìÑ –§–∞–π–ª", callback_data="type_file")],
        [InlineKeyboardButton("üñº –§–æ—Ç–æ", callback_data="type_photo")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    return kb

def confirm_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_send")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    return kb

def cancel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    add_user(message.from_user.id)
    name = message.from_user.full_name
    if message.from_user.id == ADMIN_ID:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢—ã ‚Äî –∞–¥–º–∏–Ω.", reply_markup=admin_keyboard())
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.")

@dp.message()
async def save_user_and_search(message: types.Message):
    add_user(message.from_user.id)
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ ‚Äî –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
    await message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# --- –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å ---
@dp.callback_query(Text("send_broadcast"))
async def cb_send_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=broadcast_type_keyboard())
    await state.set_state(BroadcastStates.waiting_for_type)
    await callback.answer()

@dp.callback_query(Text(startswith="type_"), BroadcastStates.waiting_for_type)
async def cb_choose_broadcast_type(callback: types.CallbackQuery, state: FSMContext):
    broadcast_type = callback.data.split("_")[1]
    await state.update_data(broadcast_type=broadcast_type)
    if broadcast_type == "text":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=cancel_keyboard())
        await state.set_state(BroadcastStates.waiting_for_text)
    elif broadcast_type == "file":
        await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (PDF, –¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=cancel_keyboard())
        await state.set_state(BroadcastStates.waiting_for_media)
    elif broadcast_type == "photo":
        await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=cancel_keyboard())
        await state.set_state(BroadcastStates.waiting_for_media)
    await callback.answer()

@dp.message(BroadcastStates.waiting_for_text)
async def handle_broadcast_text(message: types.Message, state: FSMContext):
    text = message.text or ""
    await state.update_data(broadcast_text=text)
    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏1|URL1\n–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏2|URL2`\n"
        "–ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `–Ω–µ—Ç` –∏–ª–∏ `/skip`", parse_mode="Markdown"
    )
    await state.set_state(BroadcastStates.waiting_for_buttons)

@dp.message(BroadcastStates.waiting_for_media)
async def handle_broadcast_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    broadcast_type = data.get("broadcast_type")
    if broadcast_type == "file" and message.document:
        await state.update_data(broadcast_file_id=message.document.file_id, broadcast_file_name=message.document.file_name)
    elif broadcast_type == "photo" and message.photo:
        photo = message.photo[-1]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        await state.update_data(broadcast_photo_id=photo.file_id)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.")
        return
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º), –ª–∏–±–æ /skip",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_for_text)

@dp.message(BroadcastStates.waiting_for_buttons)
async def handle_broadcast_buttons(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() in ["–Ω–µ—Ç", "/skip"]:
        await state.update_data(broadcast_buttons=None)
    else:
        buttons = []
        lines = text.split("\n")
        for line in lines:
            if "|" in line:
                btn_text, btn_url = line.split("|", 1)
                buttons.append(InlineKeyboardButton(text=btn_text.strip(), url=btn_url.strip()))
        if not buttons:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –∏–ª–∏ /skip, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∫–Ω–æ–ø–æ–∫.")
            return
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(*buttons)
        await state.update_data(broadcast_buttons=kb)
    await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=confirm_keyboard())
    await state.set_state(BroadcastStates.waiting_for_confirm)

@dp.message(Text(startswith="/skip"), BroadcastStates.waiting_for_text)
async def skip_text(message: types.Message, state: FSMContext):
    await state.update_data(broadcast_text="")
    await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=confirm_keyboard())
    await state.set_state(BroadcastStates.waiting_for_confirm)

@dp.callback_query(Text("confirm_send"), BroadcastStates.waiting_for_confirm)
async def send_broadcast(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    broadcast_type = data.get("broadcast_type")
    text = data.get("broadcast_text", "")
    buttons = data.get("broadcast_buttons")
    user_ids = get_all_user_ids()
    sent = 0
    failed = 0

    await callback.message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    for user_id in user_ids:
        try:
            if broadcast_type == "text":
                await bot.send_message(user_id, text or " ", reply_markup=buttons)
            elif broadcast_type == "file":
                file_id = data.get("broadcast_file_id")
                if file_id:
                    await bot.send_document(user_id, file_id, caption=text, reply_markup=buttons)
                else:
                    await bot.send_message(user_id, text or " ", reply_markup=buttons)
            elif broadcast_type == "photo":
                photo_id = data.get("broadcast_photo_id")
                if photo_id:
                    await bot.send_photo(user_id, photo_id, caption=text, reply_markup=buttons)
                else:
                    await bot.send_message(user_id, text or " ", reply_markup=buttons)
            sent += 1
            await asyncio.sleep(0.05)  # –Ω–µ–±–æ–ª—å—à–æ–π delay, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    await callback.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}")
    await state.clear()
    await callback.answer()

@dp.callback_query(Text("cancel"))
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@dp.callback_query(Text("stats"))
async def show_stats(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    total = count_users()
    day = count_users_since(24 * 3600)
    week = count_users_since(7 * 24 * 3600)
    month = count_users_since(30 * 24 * 3600)
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ: {total}\n"
        f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {day}\n"
        f"üìÜ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {week}\n"
        f"üóì –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {month}"
    )
    await callback.message.answer(text)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞) ---
@dp.callback_query(Text("admin_search"))
async def admin_search(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    await callback.message.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await callback.answer()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    init_db()
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
